// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id   Int    @id @default(autoincrement())
  name String

  username String @unique
  email    String @unique

  bio      String?
  role     Role    @default(BASIC)
  password String

  posts        Post[]
  comments     Comment[]
  postLikes    Postlike[]
  commentLikes Commentlike[]
  notis        Noti[]

  followers  Follow[]  @relation("follower")
  followings Follow[]  @relation("following")
  senders    Massage[] 
  
  chats Chat[] @relation("ChatUsers")

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Post {
  id      Int    @id @default(autoincrement())
  content String

  comments  Comment[]
  postLikes Postlike[]
  notis     Noti[]

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  commentLikes Commentlike[]
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
}

model Postlike {
  id       Int      @id @default(autoincrement())
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Commentlike {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Follow {
  id          Int  @id @default(autoincrement())
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  follower   User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Noti {
  id      Int    @id @default(autoincrement())
  type    String
  content String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  read Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Chat {
  id       Int       @id @default(autoincrement())
  users    User[]    @relation("ChatUsers")
  massages Massage[]
  lastReadMessageId Int?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
}

model Massage {
  id         Int      @id @default(autoincrement())
  content    String
  sender     User     @relation( fields: [senderId], references: [id],onDelete: Cascade)
  senderId   Int
  chat       Chat     @relation(fields: [chatId], references: [id],onDelete: Cascade)
  chatId     Int
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}

enum Role {
  BASIC
  ADMIN
}
